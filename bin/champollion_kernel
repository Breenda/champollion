my $MINS = 0;
my $MIN_WIN_SIZE = 20;
my $penalty01 = 0.8;
my $penalty21 = 0.95;
my $penalty12 = 0.95;
my $penalty22 = 0.90;
my $penalty31 = 0.90;
my $penalty13 = 0.90;
my $penalty23 = 0.85;
my $penalty32 = 0.85;
my $penalty41 = 0.85;
my $penalty14 = 0.85;
my $penalty33 = 0.8;

sub set_score {
    my ($x, $y, $d) = @_;
    
    $score{"$x,$y"} = $d;
}

sub get_score {
    my ($x, $y) = @_;

    if (defined $score{"$x,$y"}) {
	return $score{"$x,$y"};
    } else {
	return 0;
    }
}

sub align {
    my ($x, $y, $nx, $ny) = @_;
    my ($s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12); 
    my ($i, $j, $oi, $oj, $si, $sj, $smax);
    my ($im1, $im2, $im3, $im4, $jm1, $jm2, $jm3, $jm4);

    $xyratio = $nx/$ny;
    #print STDERR "$xyratio Win: $window_size\n";
    for($j = 0; $j <= $ny; $j++) {
	my $center = int($j * $xyratio);
	$window_start = $center-$window_size>0?$center-$window_size:0;
	$window_end = $center+$window_size<$nx?$center+$window_size:$nx;
	for($i = $window_start; $i <= $window_end; $i++) {
	    $im1 = $i-1; $im2 = $i-2; $im3 = $i-3; $im4 = $i-4; 
	    $jm1 = $j-1; $jm2 = $j-2; $jm3 = $j-3; $jm4 = $j-4; 
	    
            $s1 = $i>0 && $j>0 ?                # 1-1 
                get_score($i-1, $j-1) + score_func("$im1 - $jm1")
                    : $MINS;
            $s2 = $i>0 ?                        # 1-0
                get_score($i-1, $j) + score_func("$im1 -")
                    : $MINS;
            $s3 = $j>0 ?                        # 0-1 
                get_score($i, $j-1) + score_func("- $jm1")
                    : $MINS;
            $s4 = $i>1 && $j>0 ?                # 2-1 
                get_score($i-2, $j-1) + score_func("$im2 $im1 - $jm1")
                    : $MINS;
            $s5 = $i>0 && $j>1 ?                # 1-2 
                get_score($i-1, $j-2) + score_func("$im1 - $jm2 $jm1")
		    : $MINS;
            $s6 = $i>1 && $j>1 ?                # 2-2 
                get_score($i-2, $j-2) + score_func("$im2 $im1 - $jm2 $jm1")
                    : $MINS; 

	    unless ($disallow3) {
		$s7 = $i>0 && $j>2 ?                # 1-3 
		    get_score($i-1, $j-3) + score_func("$im1 - $jm3 $jm2 $jm1")
			: $MINS;
		$s8 = $i>2 && $j>0?                 # 3-1
		    get_score($i-3, $j-1) + score_func("$im3 $im2 $im1 - $jm1")
			: $MINS;
		$s9 = $i>1 && $j>2 ?                # 2-3 
		    get_score($i-2, $j-3) + score_func("$im2 $im1 - $jm3 $jm2 $jm1")
			: $MINS;
		$s10 = $i>2 && $j>1 ?               # 3-2 
		    get_score($i-3, $j-2) + score_func("$im3 $im2 $im1 - $jm2 $jm1")
			: $MINS;
		$s11 = $i>2 && $j>2 ?               # 3-3 
		    get_score($i-3, $j-3) + score_func("$im3 $im2 $im1 - $jm3 $jm2 $jm1")
			: $MINS;
		$s12 = $i>0 && $j>3 ?                # 1-4 
		    get_score($i-1, $j-4) + score_func("$im1 - $jm4 $jm3 $jm2 $jm1")
			: $MINS;
		$s13 = $i>3 && $j>0?                 # 4-1
		    get_score($i-4, $j-1) + score_func("$im4 $im3 $im2 $im1 - $jm1")
			: $MINS;
	    }


	    $smax = $s1;
	    if($s2>$smax) { $smax=$s2 };
	    if($s3>$smax) { $smax=$s3 };
	    if($s4>$smax) { $smax=$s4 };
	    if($s5>$smax) { $smax=$s5 };
	    if($s6>$smax) { $smax=$s6 };
	    if($s7>$smax) { $smax=$s7 };
	    if($s8>$smax) { $smax=$s8 };
	    if($s9>$smax) { $smax=$s9 };
	    if($s10>$smax) { $smax=$s10 };
	    if($s11>$smax) { $smax=$s11 };
	    if($s12>$smax) { $smax=$s12 };
	    if($s13>$smax) { $smax=$s13 };


	    if($smax == $MINS) {
		set_score($i,$j,0);
	    } elsif ($smax == $s1) {             # 1-1
		set_score($i,$j,$s1);
		$path_x{"$i,$j"} = $i-1;
		$path_y{"$i,$j"} = $j-1;
	    } elsif ($smax == $s2) {             # 1-0
		set_score($i,$j,$s2);
		$path_x{"$i,$j"} = $i-1;
		$path_y{"$i,$j"} = $j;
	    } elsif ($smax == $s3) {             # 0-1
		set_score($i,$j,$s3);
		$path_x{"$i,$j"} = $i;
		$path_y{"$i,$j"} = $j-1;
	    } elsif ($smax == $s4) {             # 2-1
		set_score($i,$j,$s4);
		$path_x{"$i,$j"} = $i-2;
		$path_y{"$i,$j"} = $j-1;
	    } elsif ($smax == $s5){              # 1-2
		set_score($i,$j,$s5);
		$path_x{"$i,$j"} = $i-1;
		$path_y{"$i,$j"} = $j-2;
	    } elsif ($smax == $s6) {             # 2-2
		set_score($i,$j,$s6);
		$path_x{"$i,$j"} = $i-2;
		$path_y{"$i,$j"} = $j-2;
	    } elsif ($smax == $s7) {             # 1-3
		set_score($i,$j,$s7);
		$path_x{"$i,$j"} = $i-1;
		$path_y{"$i,$j"} = $j-3;
	    } elsif ($smax == $s8) {             # 3-1
		set_score($i,$j,$s8);
		$path_x{"$i,$j"} = $i-3;
		$path_y{"$i,$j"} = $j-1;
	    } elsif ($smax == $s9) {             # 2-3
		set_score($i,$j,$s9);
		$path_x{"$i,$j"} = $i-2;
		$path_y{"$i,$j"} = $j-3;
	    } elsif ($smax == $s10){             # 3-2
		set_score($i,$j,$s10);
		$path_x{"$i,$j"} = $i-3;
		$path_y{"$i,$j"} = $j-2;
	    } elsif ($smax == $s11) {            # 3-3
		set_score($i,$j,$s11);
		$path_x{"$i,$j"} = $i-3;
		$path_y{"$i,$j"} = $j-3;
	    } elsif ($smax == $s12) {             # 1-4
		set_score($i,$j,$s12);
		$path_x{"$i,$j"} = $i-1;
		$path_y{"$i,$j"} = $j-4;
	    } elsif ($smax == $s13) {             # 4-1
		set_score($i,$j,$s13);
		$path_x{"$i,$j"} = $i-4;
		$path_y{"$i,$j"} = $j-1;
	    }
	}
    }
 
    $n = 0;
    for($i=$nx, $j=$ny; $i>0 || $j>0; $i = $oi, $j = $oj, $n++) {
	$oi = $path_x{"$i,$j"};
	$oj = $path_y{"$i,$j"};
	$si = $i - $oi;
	$sj = $j - $oj;

	$im1 = $i-1; $im2 = $i-2; $im3 = $i-3;
	$jm1 = $j-1; $jm2 = $j-2; $jm3 = $j-3;
	
	if($si == 1 && $sj == 1) {                # 1-1
	    $ralign[$n] = "$i <=> $j";
	} elsif ($si == 1 && $sj == 0) {          # 1-0
	    $ralign[$n] = "$i <=> omitted";
	} elsif ($si == 0 && $sj == 1) {          # 0-1
	    $ralign[$n] = "omitted <=> $j";
	} elsif ($si == 2 && $sj == 1) {          # 2-1
	    $ralign[$n] = "$im1,$i <=> $j";
	} elsif ($si == 1 && $sj ==2 ) {          # 1-2 
	    $ralign[$n] = "$i <=> $jm1,$j";
	} elsif ($si == 2 && $sj == 2) {          # 2-2
	    $ralign[$n] = "$im1,$i <=> $jm1,$j";
	} elsif ($si == 1 && $sj == 3) {          # 1-3
	    $ralign[$n] = "$i <=> $jm2,$jm1,$j";
	} elsif ($si == 3 && $sj == 1) {          # 3-1
	    $ralign[$n] = "$im2,$im1,$i <=> $j";
	} elsif ($si == 2 && $sj == 3) {          # 2-3
	    $ralign[$n] = "$im1,$i <=> $jm2,$jm1,$j";
	} elsif ($si == 3 && $sj == 2) {          # 3-2
	    $ralign[$n] = "$im2,$im1,$i <=> $jm1,$j";
	} elsif ($si == 3 && $sj == 3) {          # 3-3
	    $ralign[$n] = "$im2,$im1,$i <=> $jm2,$jm1,$j";
	} elsif ($si == 1 && $sj == 4) {          # 1-4
	    $ralign[$n] = "$i <=> $jm3,$jm2,$jm1,$j";
	} elsif ($si == 4 && $sj == 1) {          # 4-1
	    $ralign[$n] = "$im3,$im2,$im1,$i <=> $j";
	}
    }
    
    return $n;
}


sub score_func {
    my ($map) = @_;
    my ($score, $x, $y, @x, @y, $nx, $ny, %xtokens, %ytokens);

    ($x, $y) = split '-', $map;
    @x = split ' ', $x;
    @y = split ' ', $y;
    
    $nx = @x; $ny = @y;
    
    return 0.01 if $nx ==0 || $ny == 0;


    $xtokens = merge_token_hash(\@xst, @x);
    $ytokens = merge_token_hash(\@yst, @y);
    $score = score_bag_words(\@x,\@y,$xtokens,$ytokens,\%xtoken_stat);

    if ($nx == 1 && $ny == 1) {
	return $score;
    } elsif ($nx == 1 && $ny == 2) {
	return $score * $penalty12;
    } elsif ($nx == 2 && $ny == 1) {
	return $score * $penalty21;
    } elsif ($nx == 2 && $ny == 2) {
	return $score * $penalty22;
    } elsif ($nx == 1 && $ny == 3) {
	return $score * $penalty13;
    } elsif ($nx == 3 && $ny == 1) {
	return $score * $penalty31;
    } elsif ($nx == 2 && $ny == 3) {
	return $score * $penalty23;
    } elsif ($nx == 3 && $ny == 2) {
	return $score * $penalty32;
    } elsif ($nx == 3 && $ny == 3) {
	return $score * $penalty33;
    } elsif ($nx == 1 && $ny == 4) {
	return $score * $penalty14;
    } elsif ($nx == 4 && $ny == 1) {
	return $score * $penalty41;
    }
}


sub score_bag_words {
    my ($xsnts, $ysnts, $xtoken_href, $ytoken_href, $xtoken_stat_href) = @_;
    my %xtoken_h = %$xtoken_href;
    my %ytoken_h = %$ytoken_href;
    my $min_pairs, $score = 0;
    
    #print STDERR "score bag words\n";

    $x_total_tokens = $$xtoken_stat_href{"TTAALL"};

    foreach $xsnt (@$xsnts) {
	foreach $ysnt (@$ysnts) {
	    #print STDERR "$xsnt $ysnt\n";
	    foreach $idx (@{$transpairs{$xsnt,$ysnt}}) {
		$pair = $dict_idx{$idx};
		($xtoken, $xtoken_trans) = split ' ', $pair;
		#print STDERR "$pair: $xtoken, $xtoken_trans\n";
		$min_pairs = min($xtoken_h{$xtoken},$ytoken_h{$xtoken_trans});
		$score += log(($x_total_tokens/$$xtoken_stat_href{$xtoken}) * $min_pairs + 1);
		$xtoken_h{$xtoken} -= $min_pairs;
		$ytoken_h{$xtoken_trans} -= $min_pairs;
	    }
	}
    }
    return $score;
}

sub merge_token_hash {
    my ($st_aref,@st) = @_;
    

    # merge one sentence
    if (scalar @st == 1) {
	return $$st_aref[$st[0]];

    # merge two sentences
    } elsif (scalar @st == 2) {
	return merge_hash(\%{$$st_aref[$st[0]]}, \%{$$st_aref[$st[1]]});

    # merge three sentences
    } elsif (scalar @st == 3) {
	return merge_hash(\%{$$st_aref[$st[0]]},
			   merge_hash(\%{$$st_aref[$st[1]]}, \%{$$st_aref[$st[2]]}));

    # merge four sentences
    } elsif (scalar @st == 4) {
	return merge_hash(merge_hash(\%{$$st_aref[$st[0]]}, \%{$$st_aref[$st[1]]}),
			  merge_hash(\%{$$st_aref[$st[2]]}, \%{$$st_aref[$st[3]]}));
    }

}

sub merge_hash {
	my ($aref, $bref) = @_;
	my %newb = %$bref;

	foreach (keys %$aref) {
	    $newb{$_} += $$aref{$_};
	}
	
	return \%newb;
}

1;

